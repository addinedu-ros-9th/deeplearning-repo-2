import random
import time
from typing import Dict, Any
from datetime import datetime

class LocalMockServer:
    """
    Í∞úÎ∞ú Î∞è ÌÖåÏä§Ìä∏Ïö© Î°úÏª¨ Î™®Ïùò ÏÑúÎ≤Ñ
    Ïã§Ï†ú ÏÑúÎ≤ÑÍ∞Ä ÏóÜÏùÑ Îïå ÏÇ¨Ïö©
    Confluence Î¨∏ÏÑú Í∏∞Î∞ò ÌëúÏ§Ä ÏùëÎãµ ÏΩîÎìú ÏÇ¨Ïö©
    """
    
    def __init__(self):
        # Confluence Î¨∏ÏÑú Í∏∞Î∞ò ÌëúÏ§Ä ÏùëÎãµ ÏΩîÎìú Îß§Ìïë ÌÖåÏù¥Î∏î
        self.standard_response_mapping = {
            # ÌôúÏ£ºÎ°ú ÏÉÅÌÉú ‚Üí ÌëúÏ§Ä ÏùëÎãµ ÏΩîÎìú Îß§Ìïë
            "CLEAR": {
                "RWY-ALPHA": "RWY_A_CLEAR",
                "RWY-BRAVO": "RWY_B_CLEAR"
            },
            "BLOCKED": {
                "RWY-ALPHA": "RWY_A_BLOCKED", 
                "RWY-BRAVO": "RWY_B_BLOCKED"
            },
            "CAUTION": {
                "RWY-ALPHA": "RWY_A_BLOCKED",  # Ï£ºÏùò ÏÉÅÌÉúÎäî Ï∞®Îã®ÏúºÎ°ú Ï≤òÎ¶¨
                "RWY-BRAVO": "RWY_B_BLOCKED"
            }
        }
        
        # Confluence Î¨∏ÏÑú Í∏∞Ï§Ä Ï°∞Î•ò ÏúÑÌóòÎèÑ Î°úÌÖåÏù¥ÏÖò Îç∞Ïù¥ÌÑ∞
        self.bird_rotation_states = [
            {"risk_level": "LOW", "response_code": "BIRD_RISK_LOW"},
            {"risk_level": "MEDIUM", "response_code": "BIRD_RISK_MEDIUM"}, 
            {"risk_level": "HIGH", "response_code": "BIRD_RISK_HIGH"},
            {"risk_level": "LOW", "response_code": "BIRD_RISK_LOW"}  # Îã§Ïãú LOWÎ°ú ÏàúÌôò
        ]
        
        self.runway_alpha_rotation_states = [
            {"status": "CLEAR", "response_code": "RWY_A_CLEAR"},
            {"status": "BLOCKED", "response_code": "RWY_A_BLOCKED"},
            {"status": "CLEAR", "response_code": "RWY_A_CLEAR"},
            {"status": "BLOCKED", "response_code": "RWY_A_BLOCKED"}
        ]
        
        self.runway_bravo_rotation_states = [
            {"status": "BLOCKED", "response_code": "RWY_B_BLOCKED"},
            {"status": "CLEAR", "response_code": "RWY_B_CLEAR"},
            {"status": "BLOCKED", "response_code": "RWY_B_BLOCKED"},
            {"status": "CLEAR", "response_code": "RWY_B_CLEAR"}
        ]
        
        # Î°úÌÖåÏù¥ÏÖò Ïù∏Îç±Ïä§ Ï¥àÍ∏∞Ìôî
        self.bird_rotation_index = 0
        self.runway_alpha_rotation_index = 0
        self.runway_bravo_rotation_index = 0
        
        # Îçî Îã§ÏñëÌïú ÌôúÏ£ºÎ°ú ÏãúÎÇòÎ¶¨Ïò§
        self.runway_data = {
            "RWY-ALPHA": {
                "status": "CLEAR",
                "risk_level": "LOW", 
                "condition": "DRY",
                "wind": "270/08KT",
                "visibility": "10KM"
            },
            "RWY-BRAVO": {
                "status": "BLOCKED",  # Ï¥àÍ∏∞ ÏÉÅÌÉú - Ï∞®Îã®Îê®
                "risk_level": "MEDIUM",
                "condition": "WET", 
                "wind": "270/12KT",  # Î∞îÎûå Í∞ïÌôî
                "visibility": "8KM"
            },
            "RWY-CHARLIE": {  # ÏÉàÎ°úÏö¥ ÌôúÏ£ºÎ°ú Ï∂îÍ∞Ä
                "status": "BLOCKED",
                "risk_level": "HIGH",
                "condition": "MAINTENANCE",
                "wind": "270/08KT",
                "visibility": "10KM"
            }
        }
        
        # Confluence Î¨∏ÏÑú Í∏∞Ï§Ä Ï°∞Î•ò ÏúÑÌóòÎèÑ ÏãúÎÇòÎ¶¨Ïò§
        self.risk_scenarios = [
            {
                "risk_level": "LOW",
                "response_code": "BIRD_RISK_LOW",
                "bird_count": random.randint(1, 3),
                "species": ["sparrows"],
                "areas": ["taxiway area"]
            },
            {
                "risk_level": "MEDIUM", 
                "response_code": "BIRD_RISK_MEDIUM",
                "bird_count": random.randint(4, 8),
                "species": ["seagulls", "pigeons"],
                "areas": ["runway vicinity", "approach path"]
            },
            {
                "risk_level": "HIGH",
                "response_code": "BIRD_RISK_HIGH",
                "bird_count": random.randint(10, 20),
                "species": ["geese", "eagles", "hawks"],
                "areas": ["runway vicinity", "approach path", "departure corridor"]
            }
        ]
        
        # Ï¥àÍ∏∞ Ï°∞Î•ò ÏúÑÌóòÎèÑ (LOW Î†àÎ≤®Î°ú ÏãúÏûë)
        self.bird_data = self.risk_scenarios[0].copy()
        self.bird_last_update = datetime.now()  # ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ
        self.bird_update_interval = 300  # 5Î∂ÑÎßàÎã§ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
        
        print(f"[LocalMockServer] ü¶Ö Ï°∞Î•ò ÏãúÎÇòÎ¶¨Ïò§: {self.bird_data['risk_level']} ÏúÑÌóòÎèÑ ‚Üí {self.bird_data['response_code']}")
        print(f"[LocalMockServer] üõ¨ ÌôúÏ£ºÎ°ú ÏÉÅÌÉú: ALPHA({self.runway_data['RWY-ALPHA']['status']}), BRAVO({self.runway_data['RWY-BRAVO']['status']}), CHARLIE({self.runway_data['RWY-CHARLIE']['status']})")
        print(f"[LocalMockServer] üîÑ Î°úÌÖåÏù¥ÏÖò Î™®Îìú: Í∞Å ÏöîÏ≤≠ÎßàÎã§ ÏÉÅÌÉú Î≥ÄÍ≤Ω")
        
    def _rotate_bird_state(self):
        """Ï°∞Î•ò ÏúÑÌóòÎèÑ Î°úÌÖåÏù¥ÏÖò"""
        self.bird_rotation_index = (self.bird_rotation_index + 1) % len(self.bird_rotation_states)
        new_state = self.bird_rotation_states[self.bird_rotation_index]
        
        old_level = self.bird_data['risk_level']
        
        # ÏÉàÎ°úÏö¥ ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
        self.bird_data = self.risk_scenarios[self.bird_rotation_index % len(self.risk_scenarios)].copy()
        self.bird_data['risk_level'] = new_state['risk_level']
        self.bird_data['response_code'] = new_state['response_code']
        
        print(f"[LocalMockServer] ü¶Ö BIRD Î°úÌÖåÏù¥ÏÖò: {old_level} ‚Üí {self.bird_data['risk_level']}")
        
    def _rotate_runway_state(self, runway_id):
        """ÌôúÏ£ºÎ°ú ÏÉÅÌÉú Î°úÌÖåÏù¥ÏÖò"""
        if runway_id == "RWY-ALPHA":
            self.runway_alpha_rotation_index = (self.runway_alpha_rotation_index + 1) % len(self.runway_alpha_rotation_states)
            new_state = self.runway_alpha_rotation_states[self.runway_alpha_rotation_index]
            old_status = self.runway_data["RWY-ALPHA"]["status"]
            self.runway_data["RWY-ALPHA"]["status"] = new_state["status"]
            print(f"[LocalMockServer] üõ¨ RWY-ALPHA Î°úÌÖåÏù¥ÏÖò: {old_status} ‚Üí {new_state['status']}")
        elif runway_id == "RWY-BRAVO":
            self.runway_bravo_rotation_index = (self.runway_bravo_rotation_index + 1) % len(self.runway_bravo_rotation_states)
            new_state = self.runway_bravo_rotation_states[self.runway_bravo_rotation_index]
            old_status = self.runway_data["RWY-BRAVO"]["status"]
            self.runway_data["RWY-BRAVO"]["status"] = new_state["status"]
            print(f"[LocalMockServer] üõ¨ RWY-BRAVO Î°úÌÖåÏù¥ÏÖò: {old_status} ‚Üí {new_state['status']}")
    
    def process_query(self, intent: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """
        Î™®Ïùò ÏßàÏùò Ï≤òÎ¶¨ - Confluence Î¨∏ÏÑú Í∏∞Ï§Ä ÌëúÏ§Ä ÏùëÎãµ ÏΩîÎìú ÏÇ¨Ïö©
        
        Args:
            intent: ÏßàÏùò Ïù∏ÌÖêÌä∏ (Confluence Î¨∏ÏÑú Í∏∞Ï§Ä)
            parameters: ÏßàÏùò ÌååÎùºÎØ∏ÌÑ∞
            
        Returns:
            Confluence Î¨∏ÏÑú ÌòïÏãùÏùò Î™®Ïùò ÏùëÎãµ Îç∞Ïù¥ÌÑ∞
        """
        if intent == "bird_risk_inquiry":
            # Îß§ ÏöîÏ≤≠ÎßàÎã§ Ï°∞Î•ò ÏúÑÌóòÎèÑ Î°úÌÖåÏù¥ÏÖò
            self._rotate_bird_state()
            
            # Confluence Î¨∏ÏÑú Í∏∞Ï§Ä Ï°∞Î•ò ÏúÑÌóòÎèÑ ÏùëÎãµ
            return {
                "type": "response",
                "status": "success",
                "intent": intent,
                "response_code": self.bird_data["response_code"],  # BIRD_RISK_LOW/MEDIUM/HIGH
                "source": "main_server"
            }
            
        elif intent == "runway_alpha_status":
            # Îß§ ÏöîÏ≤≠ÎßàÎã§ ÌôúÏ£ºÎ°ú ÏÉÅÌÉú Î°úÌÖåÏù¥ÏÖò
            self._rotate_runway_state("RWY-ALPHA")
            
            runway_info = self.runway_data["RWY-ALPHA"]
            status = runway_info["status"]
            response_code = "RWY_A_CLEAR" if status == "CLEAR" else "RWY_A_BLOCKED"
            
            return {
                "type": "response",
                "status": "success",
                "intent": intent,
                "response_code": response_code,  # RWY_A_CLEAR ÎòêÎäî RWY_A_BLOCKED
                "source": "main_server"
            }
            
        elif intent == "runway_bravo_status":
            # Îß§ ÏöîÏ≤≠ÎßàÎã§ ÌôúÏ£ºÎ°ú ÏÉÅÌÉú Î°úÌÖåÏù¥ÏÖò
            self._rotate_runway_state("RWY-BRAVO")
            
            runway_info = self.runway_data["RWY-BRAVO"]
            status = runway_info["status"]
            response_code = "RWY_B_CLEAR" if status == "CLEAR" else "RWY_B_BLOCKED"
            
            return {
                "type": "response",
                "status": "success",
                "intent": intent,
                "response_code": response_code,  # RWY_B_CLEAR ÎòêÎäî RWY_B_BLOCKED
                "source": "main_server"
            }
            
        elif intent == "available_runway_inquiry":
            available_runways = [rwy for rwy, info in self.runway_data.items() if info["status"] == "CLEAR"]
            
            # Confluence Î¨∏ÏÑú Í∏∞Ï§Ä ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌôúÏ£ºÎ°ú ÏùëÎãµ ÏΩîÎìú
            if len(available_runways) == 0:
                response_code = "NO_RUNWAYS_AVAILABLE"
            elif len(available_runways) >= 3:
                response_code = "AVAILABLE_RUNWAYS_ALL"
            elif len(available_runways) == 1:
                if "RWY-ALPHA" in available_runways:
                    response_code = "AVAILABLE_RUNWAYS_A_ONLY"
                elif "RWY-BRAVO" in available_runways:
                    response_code = "AVAILABLE_RUNWAYS_B_ONLY"
                else:
                    response_code = "AVAILABLE_RUNWAYS_A_ONLY"  # Í∏∞Î≥∏Í∞í
            else:
                response_code = "AVAILABLE_RUNWAYS_ALL"  # 2Í∞ú Ïù¥ÏÉÅÏù¥Î©¥ ALLÎ°ú Ï≤òÎ¶¨
            
            print(f"[LocalMockServer] üõ¨ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌôúÏ£ºÎ°ú: {available_runways} ‚Üí {response_code}")
            
            return {
                "type": "response",
                "status": "success",
                "intent": intent,
                "response_code": response_code,  # Confluence Î¨∏ÏÑú Í∏∞Ï§Ä ÏùëÎãµ ÏΩîÎìú
                "source": "main_server"
            }
        
        else:
            return {
                "type": "response",
                "status": "error",
                "intent": intent,
                "response_code": "UNRECOGNIZED_COMMAND",
                "source": "main_server"
            } 